{
  
    
        "post0": {
            "title": "Methods in Java",
            "content": "What is a Method? . Function or sub-code that is associated with a class in object-oriented programming | Can contain a set of codes that performs an action | It can also take an input and return an output based on the user | . Creating a Method . A method is created within a class | It is defined with the name, followed by () | An example of a Java pre-defined method is System.out.println() | . Example Code . public class Main { static void ExampleMethod(){ // ExampleMethod is the name of the method; static means that the method belongs to the Main class and not an object System.out.println(&quot;Hi!&quot;); } } . Calling a Method . With Java, you can call a method by writing the method&#39;s name and then having (); after it | . Example Code . public class Main { static void ExampleMethod() { System.out.println(&quot;Hello AP CSA!&quot;); } public static void main(String[] args) { ExampleMethod(); } } // Outputs &quot;I just got executed!&quot; . Hacks . Fill in the missing code: | . static void myMethod() { System.out.println(&quot;I just got executed&quot;); } public static void main(String[] args) { __; } . Describe what the Method does: public String myMethod(String s,int i){ String r = &#39;&#39;; for(int j = 0; j &lt; s.length(); j++) { r += (char)(s.charAt(j)+i); . } return r; } | .",
            "url": "https://hetvit27.github.io/hetvitrivedi/jupyter/2022/09/19/Methods.html",
            "relUrl": "/jupyter/2022/09/19/Methods.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Control Structures in Java",
            "content": "Overview to Control Structures . Programming blocks that can change the path taken to complete a set of instructions | Three kinds of structures: Conditional branches, Loops, and Branching Statements | Conditional Branches are used for choosing between two or more paths: if/else/else if and switch case | Loops are used to sift through different objects and run loops of specific codes: for, while, and do while | Branching Statements are used to change the process of loops: break and continue | . If/Else/Else If . We used this when we make our own learnings last week about if/else statements and Boolean expressions . | Chooses between two paths . | . if (count &gt; 6) { System.out.println(&quot;Count is higher than 6&quot;); } else { System.out.println(&quot;Count is lower or equal than 6&quot;); } . Ternary Operator . Takes three operands rather than one or two . | Shorter way to write an if else code; uses a question mark . | . System.out.println(count &gt; 6 ? &quot;Count is higher than 6&quot; : &quot;Count is lower or equal than 6&quot;); . Switch case . If-else ladder that checks multiple conditions at once | Value inputted is checked with each given case until a match is found | Things to remember: two cases can&#39;t have the same value, data variable needs to be the same in all cases, and the value needs to be literal or constant not a variable. | . import java.util.Scanner; public class SwitchExample { // sets up class and objects for scanner public void go() { Scanner scan = new Scanner(System.in); int score = scan.nextInt(); switch (score){ // switch statement with condition that goes through different cases to find a match case 1: // for the score of less than 60 System.out.println(&quot;You got an F&quot;); break; case 2: // for the score between 60 and 70 System.out.println(&quot;You got a D&quot;); break; case 3: // for a score between 70 and 80 System.out.println(&quot;You got a C&quot;); break; case 4: // for a score between an 80 and a 90 System.out.println(&quot;You got a B&quot;); break; case 5: // for a score between a 90 and 100 System.out.println(&quot;You got an A&quot;); break; default: // if none of the cases are a match, this is what will be the code automatically executed System.out.println(&quot;You didn&#39;t even get a grade&quot;); } } public static void main(String[] args) { SwitchExample cond = new SwitchExample(); cond.go(); } } SwitchExample.main(null); . You didn&#39;t even get a grade . Loops . Used to repeat a code multiple times . | We can set the number of times we want the code to be repeated . | . for (int i = 5; i &lt;= 90; i++) { methodToRepeat(); } int whileCounter = 5; while (whileCounter &lt;= 90) { methodToRepeat(); whileCounter++; } . Break and Continue . A break is used to leave a loop earlier than expected | A continue is used to skip a loop we were already in | . List&lt;String&gt; names = getNameList(); String name = &quot;Group 3&quot;; int index = 0; for ( ; index &lt; names.length; index++) { if (names[index].equals(name)) { break; } } // Using a list of groups to find one in specific. When we find Group 3, the code will &quot;break&quot; or stop. . List&lt;String&gt; names = getNameList(); String name = &quot;Group 3&quot;; String list = &quot;&quot;; for (int i = 0; i &lt; names.length; i++) { if (names[i].equals(name)) { continue; } list += names[i]; } // Here, if Group 3 is identified, this code will stop and the program will move on to the next; it will &quot;continue&quot; .",
            "url": "https://hetvit27.github.io/hetvitrivedi/jupyter/2022/09/19/ControlStructure.html",
            "relUrl": "/jupyter/2022/09/19/ControlStructure.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "2D Array",
            "content": "Mr. M&#39;s Code . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeys[row].length; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ (◕‿◕✿) _⍾_/ ==4== _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Bats and More Lines of the Song . class BatLoop { String [][] bats; public BatLoop() { bats = new String[][]{ // added bats instead of monkeys! //Bat 0 { &quot; / hetvi / &quot;, &quot;/ &#39;._ ( _/) _.&#39;/ &quot;, &quot;|.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| &quot;, &quot; _ / `;=/ =;` _/ &quot;, &quot; ` __| ___/ |__/` &quot;, &quot; (_|_)/ &quot;, }, //Bat 1 { &quot; / brian / &quot;, &quot;/ &#39;._ ( _/) _.&#39;/ &quot;, &quot;|.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| &quot;, &quot; _ / `;=/ =;` _/ &quot;, &quot; ` __| ___/ |__/` &quot;, &quot; (_|_)/ &quot;, }, //Bat 2 { &quot; / ellen / &quot;, &quot;/ &#39;._ ( _/) _.&#39;/ &quot;, &quot;|.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| &quot;, &quot; _ / `;=/ =;` _/ &quot;, &quot; ` __| ___/ |__/` &quot;, &quot; (_|_)/ &quot;, }, //Bat 3 { &quot; / jazair / &quot;, &quot;/ &#39;._ ( _/) _.&#39;/ &quot;, &quot;|.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| &quot;, &quot; _ / `;=/ =;` _/ &quot;, &quot; ` __| ___/ |__/` &quot;, &quot; (_|_)/ &quot;, }, //Bat 4 { &quot; / Mr. M / &quot;, &quot;/ &#39;._ ( _/) _.&#39;/ &quot;, &quot;|.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| &quot;, &quot; _ / `;=/ =;` _/ &quot;, &quot; ` __| ___/ |__/` &quot;, &quot; (_|_)/ &quot;, }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;Bat Jumpers Poem in Java Loopy&quot;); int batCount = bats.length; for (int i = batCount; i &gt;= 1; i--) { for (int row = 0; row &lt; batCount; row++) { for (int col = 0; col &lt; bats[row].length; col++) { System.out.print(bats[row][col] + &quot; &quot;); System.out.println(); } System.out.println(); } // Added the rest of the poem under the bat print if (i &gt; 1){ System.out.println(i + &quot; little bats jumping on the bed...&quot;); } else{ System.out.println(i + &quot; little bats jumping on the bed...&quot;); } System.out.println(&quot;One fell down and bumped his head!&quot;); System.out.println(&quot;Mama called the doctor and the doctor said:&quot;); if (i == 1){ System.out.println(&quot;Put those bats right to bed!&quot;); } else{ System.out.println(&quot;No more bats jumping on the bed!&quot;); } System.out.println(); batCount -= 1; } System.out.println(&quot;All the bats are off the bed!&quot;); System.out.println(&quot;Bye Bye Bats&quot;); } public static void main(String[] args) { new BatLoop().printPoem(); } } BatLoop.main(null); . Bat Jumpers Poem in Java Loopy / hetvi / / &#39;._ ( _/) _.&#39;/ |.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| _ / `;=/ =;` _/ ` __| ___/ |__/` (_|_)/ / brian / / &#39;._ ( _/) _.&#39;/ |.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| _ / `;=/ =;` _/ ` __| ___/ |__/` (_|_)/ / ellen / / &#39;._ ( _/) _.&#39;/ |.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| _ / `;=/ =;` _/ ` __| ___/ |__/` (_|_)/ / jazair / / &#39;._ ( _/) _.&#39;/ |.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| _ / `;=/ =;` _/ ` __| ___/ |__/` (_|_)/ / Mr. M / / &#39;._ ( _/) _.&#39;/ |.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| _ / `;=/ =;` _/ ` __| ___/ |__/` (_|_)/ 5 little bats jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more bats jumping on the bed! / hetvi / / &#39;._ ( _/) _.&#39;/ |.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| _ / `;=/ =;` _/ ` __| ___/ |__/` (_|_)/ / brian / / &#39;._ ( _/) _.&#39;/ |.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| _ / `;=/ =;` _/ ` __| ___/ |__/` (_|_)/ / ellen / / &#39;._ ( _/) _.&#39;/ |.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| _ / `;=/ =;` _/ ` __| ___/ |__/` (_|_)/ / jazair / / &#39;._ ( _/) _.&#39;/ |.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| _ / `;=/ =;` _/ ` __| ___/ |__/` (_|_)/ 4 little bats jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more bats jumping on the bed! / hetvi / / &#39;._ ( _/) _.&#39;/ |.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| _ / `;=/ =;` _/ ` __| ___/ |__/` (_|_)/ / brian / / &#39;._ ( _/) _.&#39;/ |.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| _ / `;=/ =;` _/ ` __| ___/ |__/` (_|_)/ / ellen / / &#39;._ ( _/) _.&#39;/ |.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| _ / `;=/ =;` _/ ` __| ___/ |__/` (_|_)/ 3 little bats jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more bats jumping on the bed! / hetvi / / &#39;._ ( _/) _.&#39;/ |.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| _ / `;=/ =;` _/ ` __| ___/ |__/` (_|_)/ / brian / / &#39;._ ( _/) _.&#39;/ |.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| _ / `;=/ =;` _/ ` __| ___/ |__/` (_|_)/ 2 little bats jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more bats jumping on the bed! / hetvi / / &#39;._ ( _/) _.&#39;/ |.&#39;&#39;._&#39;--(o.o)--&#39;_.&#39;&#39;.| _ / `;=/ =;` _/ ` __| ___/ |__/` (_|_)/ 1 little bats jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: Put those bats right to bed! All the bats are off the bed! Bye Bye Bats . class MonkeyLoop { String [][] monkeys; public MonkeyLoop() { monkeys = new String[][]{ //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot;hetvi-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ &quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; +++brian+++&quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ &quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-ellen-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ &quot;, //[3][0] &quot; _⍾_/ &quot;, &quot;==jazair== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot;==mr.m== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) { for (int col = 0; col &lt; monkeys[col].length; col++) { for (int row = 0; row &lt; monkeyCount; row++) { System.out.print(monkeys[row][col]); //print rows then columns instead of opposite System.out.print(&quot; t&quot;); //insert tab in text to line up each monkey in row } System.out.println(); } if (i &gt; 1){ System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); } else{ System.out.println(i + &quot; little monkey jumping on the bed...&quot;); } System.out.println(&quot;One fell down and bumped his head!&quot;); System.out.println(&quot;Mama called the doctor and the doctor said:&quot;); if (i == 1){ // if there is one monkey left, print the last line System.out.println(&quot;Put those monkeys right to bed!&quot;); } else{ System.out.println(&quot;No more monkey&#39;s jumping on the bed!&quot;); } System.out.println(); monkeyCount -= 1; } System.out.println(&quot;All the monkeys stopped jumping&quot;); System.out.println(&quot;Bye-bye monkeys&quot;); } public static void main(String[] args) { new MonkeyLoop().printPoem(); } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ hetvi-- +++brian+++ &lt;-ellen-&gt; ==jazair== ==mr.m== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 5 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more monkey&#39;s jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ hetvi-- +++brian+++ &lt;-ellen-&gt; ==jazair== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 4 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more monkey&#39;s jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ hetvi-- +++brian+++ &lt;-ellen-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 3 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more monkey&#39;s jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ hetvi-- +++brian+++ ⎛ ⎞ ⌋ ⌊ 2 little monkeys jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: No more monkey&#39;s jumping on the bed! ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ hetvi-- ⎛ ⎞ 1 little monkey jumping on the bed... One fell down and bumped his head! Mama called the doctor and the doctor said: Put those monkeys right to bed! All the monkeys stopped jumping Bye-bye monkeys . Hacks Questions . Is this program in more of an Imperative Programming Style or OOP Style? Explain. | . This is more Imperative Programming Style because it is not based on objects. Object based programming is more for data sets and manipulating them. Imperative programming is more similar to what we are doing here: coding for each monkey to resolve the problem -- it fell off the bed. . Are the monkeys objects? | . No they are not objects . How to access 2-D arrays? | . You can access the 2-D array by using the row index value and column index value: Name_of_the arrays[row_index][column_index]; . Notes and Takeaways . 2D arrays are like tables; they have rows and columns for storing data . | Teachers can use a 2-D array to store students&#39; grades Accessing 2D Arrays: Use[first][second] where the first index is the desired row, and the second index is the the desired column . | 2D arrays are indexed starting at 0 . | .",
            "url": "https://hetvit27.github.io/hetvitrivedi/jupyter/2022/09/19/2dArray.html",
            "relUrl": "/jupyter/2022/09/19/2dArray.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "2018 FRQ 1",
            "content": "public class FrogSimulation { /** Distance, in inches, from the starting position to the goal. */ private int goalDistance; /** Maximum number of hops allowed to reach the goal. */ private int maxHops; /** Constructs a FrogSimulation where dist is the distance, in inches, from the starting * position to the goal, and numHops is the maximum number of hops allowed to reach the goal. * Precondition: dist &gt; 0; numHops &gt; 0 */ public FrogSimulation(int dist, int numHops) { goalDistance = dist; maxHops = numHops; } /** Returns an integer representing the distance, in inches, to be moved when the frog hops. */ private int hopDistance() { /* implementation not shown */ } /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { /* to be implemented in part (a) */ } /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { /* to be implemented in part (b) */ } } . Part A . Write the simulate method, which simulates the frog attempting to hop in a straight line to a goal from the frog&#39;s starting position of 0 within a maximum number of hops. The method returns true if the frog successfully reached the goal within the maximum number of hops; otherwise, the method returns false. . public boolean simulate() { int position = 0; for (int count = 0; count &lt; MaxHops; count++) { position += hopDistance(); if (position &gt;= goalDistance) { return true; } else if (position &lt; 0) { return false; } } return false; } . Part B . Write the runSimulations method, which performs a given number of simulations and returns the proportion of simulations in which the frog successfully reached or passed the goal. For example, if the parameter passed to runSimulations is 400, and 100 of the 400 simulate method calls returned true, then the runSimulations method should return 0.25. Complete method runSimulations below. Assume that simulate works as specified, regardless of what you wrote in part (a). You must use simulate appropriately to receive full credit. . public double runSimulation(int num) // int is the number of times we want to run the loop { int countSuccess = 0; for (int i = 0; i &lt; num; i++){ if (simulate()){ countSuccess++; // if it&#39;s successful, the hops will increase by 1 } } return (double) countSuccess / num; // gives a proportion of successes } .",
            "url": "https://hetvit27.github.io/hetvitrivedi/frq/2022/09/18/2018FRQ1.html",
            "relUrl": "/frq/2022/09/18/2018FRQ1.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Focus and Skills",
            "content": "Notes from the Video . Students in college start sacrificing their mental health for their grades and to just get to classes | It&#39;s important to build habits for yourself; do the things that you love | Brainstorm: podcasting, reading, running, drinking coffee, going to the beach | Be grateful for the opportunities and resources you have, but don&#39;t burn yourself out | . Thank you note . Dear Ms. Hinds, Thank you for always being there for me whenever I need a break. You always encourage me to be my best self and to stand up to life&#39;s challenges. I&#39;m grateful for all the lessons you&#39;ve taught me from standing up for myself to leaving people with bad energy behind. I look forward to seeing you every week to laugh at jokes together and just talk about life. You are not only a teacher to me but also a second mom and a best friend. . Gratitude List . My health: being able to learn and walk | My family who always supports me in my goals | A bunch of learning resources and opportunities | Beautiful weather in SD | My friends | . Personal and Academic goals . To always be kind to others | To surround myself with uplifting people | To make a change on DNHS&#39;s campus | To get into a college that I truly believe I belong in | To always put my 100% effort into what I pursue | To use my energy and resources to make a positive impact in the campuses and communities I&#39;m apart of | .",
            "url": "https://hetvit27.github.io/hetvitrivedi/extra/2022/09/10/Focus.html",
            "relUrl": "/extra/2022/09/10/Focus.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Boolean Expressions and If Statements",
            "content": "If Statements . This type of conditional statement is composed of the idea that if a specific condition is met, then an action/code will be executed. Just check to see if something is true and will execute the code accordingly. . if (score &gt;= 90) {// the condition here is the score received on the test grade = &#39;A&#39;; // if the score is greater than 90, the action executed will be telling the user they got an A grade; if it&#39;s not true, the rest of the code will be executed and ignore what is between the brackets } . If-else Statements . A conditional statement that runs a separate (else) code if the statement is false. It&#39;s a default action. . if (score &gt;= 90) {// the condition here is the score received on the test grade = &#39;A&#39;; // if the score is greater than 90, the action executed will be telling the user they got an A grade; if it&#39;s not true, the rest of the code will be executed and ignore what is between the brackets } else { grade = &#39;Lower than an A&#39;; // if the score is less than a 90, then this alternate code will run } . If-else If-else Statement . This conditional statement allows you to have a string of codes if all the specific conditions are false . if (time &lt; 10) { // the condition here is the time greeting = &quot;Good morning&quot;; // if the time is less than 10, the code will be executed } else if (time &lt; 20) { // the second condition is here if the number is not less than 10; it must be less than 20 for the code to run greeting = &quot;Good day&quot;; // if the time is less than 20 but greater than 10, the code will be executed } else { // if the number is greater than 20, then this alternate code will run since the first two statements were false greeting = &quot;Good evening&quot;; // this code will be executed if the number is greater than 20 } . If-else 5 conditions example . Here is a code I wrote . import java.util.Scanner; public class IfElseStatements { public void go() { Scanner scan = new Scanner(System.in); int score = scan.nextInt(); if (score &lt;= 60) { System.out.println(&quot;You got an F&quot;); } else if (score &lt;= 70) { System.out.println(&quot;You got a D&quot;); } else if (score &lt;= 80) { System.out.println(&quot;You got a C&quot;); } else if (score &lt;= 90) { System.out.println(&quot;You got a B&quot;); } else if (score &lt;= 100) { System.out.println(&quot;You got an A&quot;); } else { System.out.println(&quot;You didn&#39;t even get a grade!&quot;); } } public static void main(String[] args) { IfElseStatements cond = new IfElseStatements(); cond.go(); } } IfElseStatements.main(null); . You got an A . Switch Case . A switch case is an if-else ladder that checks multiple conditions at once. The value that is inputted is checked with each given case until a match is found. Things to remember: two cases can&#39;t have the same value, data variable needs to be the same in all cases, and the value needs to be literal or constant not a variable. . import java.util.Scanner; public class SwitchExample { // sets up class and objects for scanner public void go() { Scanner scan = new Scanner(System.in); int score = scan.nextInt(); switch (score){ // switch statement with condition that goes through different cases to find a match case 1: // for the score of less than 60 System.out.println(&quot;You got an F&quot;); break; case 2: // for the score between 60 and 70 System.out.println(&quot;You got a D&quot;); break; case 3: // for a score between 70 and 80 System.out.println(&quot;You got a C&quot;); break; case 4: // for a score between an 80 and a 90 System.out.println(&quot;You got a B&quot;); break; case 5: // for a score between a 90 and 100 System.out.println(&quot;You got an A&quot;); break; default: // if none of the cases are a match, this is what will be the code automatically executed System.out.println(&quot;You didn&#39;t even get a grade&quot;); } } public static void main(String[] args) { SwitchExample cond = new SwitchExample(); cond.go(); } } SwitchExample.main(null); . You got an F . De Morgan&#39;s Law . Allows for specific Boolean statements to be written in different ways to have the same effect. It&#39;s similar to probability in statistics. The || means &quot;or&quot; and the &amp;&amp; means &quot;and&quot; . Written as: not (A or B) = (not A) and (not B) . not (A and B) = (not A) or (not B) . In code it&#39;s written as: . !(A &amp;&amp; B) == !A || !B !(A &amp;&amp; B) == !A &amp;&amp; !B . boolean dog = false; boolean labrador = true; if (!(dog &amp;&amp; windy)) { // using the &quot;and&quot; System.out.println(&quot;You have a dog that&#39;s a labrador&quot;); } else { System.out.println (&quot;Your dog is another breed&quot;); } // checks if both boolean expressions are true and then inverses the results . You have a dog that&#39;s a labrador . boolean dog = false; boolean labrador = true; if (!dog || !labrador) { // using the &quot;or&quot; System.out.println(&quot;You have a dog that&#39;s a labrador&quot;); } else { System.out.println (&quot;Your dog is another breed!&quot;); } // checks if dog is false or labrador is false . You have a dog that&#39;s a labrador . Resources I used aside from the given . Video 1: https://www.youtube.com/watch?v=HQ3dCWjfRZ4&amp;ab_channel=Transcode | Video 2: https://www.youtube.com/watch?v=SOnpOBvyhDM&amp;t=26s&amp;ab_channel=thenewboston | Video 3: https://www.youtube.com/watch?v=2CIohicXNAY&amp;ab_channel=BillButterfield | Article 1: https://www.w3schools.com/js/js_if_else.asp | .",
            "url": "https://hetvit27.github.io/hetvitrivedi/jupyter/2022/09/10/BooleanExpression.html",
            "relUrl": "/jupyter/2022/09/10/BooleanExpression.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Objects Usage",
            "content": "Console Based Menu . Objects Used: . Used scanner class to get user input and make objects | Used system class to print out static methods- | Used the java Math Class to calculate for GCM and LCM | . PBL Takeaways: . By using the Menu () code, the user is able to select which option they want to start. This connects to Frontend because the code allows the program to be more user friendly. -The user is entering what they want the code to process which is different than GUI console which allows the user to select and view different options | . import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Greatest Common Factor&quot;); System.out.println(&quot;5 - Least Common Multiple&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: // two numbers from user input Scanner input = new Scanner(System.in); System.out.println(&quot;Enter a number: &quot;); int a = input.nextInt(); System.out.println(&quot;Enter another number: &quot;); Scanner input2 = new Scanner(System.in); int b = input2.nextInt(); int c = Math.min(a, b); input.close(); input2.close(); int gcd = 1; for(int i = c; i &gt; 0; i--){ // descending if(a % i == 0 &amp;&amp; b % i == 0){ gcd = i; break; // exit loop if it is a factor } } System.out.println(&quot;The greatest common factor of &quot; + a + &quot; and &quot; + b + &quot; is &quot; + gcd); break; case 5: Scanner num1 = new Scanner(System.in); System.out.println(&quot;Enter a number: &quot;); int x = num1.nextInt(); Scanner num2 = new Scanner(System.in); System.out.println(&quot;Enter another number: &quot;); int y = num2.nextInt(); num1.close(); num2.close(); int m = Math.max(x, y); // least common multiple must be at least as large as the larger of the two numbers while (true) { // repeat until break if(m % x == 0 &amp;&amp; m % y == 0){ System.out.println(&quot;The least common multiple of &quot; + x + &quot; and &quot; + y + &quot; is &quot; + m); break; } m += 1; } break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Greatest Common Factor 5 - Least Common Multiple 0 - Quit - 1: Hello, World! 2: DefaultRedGreenYellowBluePurpleCyanWhite 3: Loading...#################### 4: Enter a number: Enter another number: The greatest common factor of 8 and 12 is 4 5: Enter a number: Enter another number: The least common multiple of 2 and 4 is 4 0: Goodbye, World! . Desktop GUI Menu . See Brian and I&#39;s GUI Console that we put together: https://bgt072105.github.io/CSA-tri1-teamrepo/2022/09/05/GUImenu.html . Objects Used: . Used the if else, if else structure that allows text to show up based on what the user selects | Scanner class | Static variable since GUI doesn&#39;t allow inputs | . PBL Learnings: . Graphical User Interface allows for the user to click and navigate through the console based on what they want to see | More faster and easier to understand | More visual for the user compared to Console | . Hacks . Explain where a Class is defined . You define a class whenever you need to add variables, objects or methods to your code | . // class definition public class classname . Explain where an instances of a Class is defined: A class is defined when you have an object. Here, I created a new menu for the user to select different options to input values for. . // new instance of class (object) new Menu(); . Explain where an object is Calling a Method: An object is calling a method when an action needs to be performed for the code to run. Here, I created an object where I can input an integer . // object calling method int choice = sc.nextInt(); // sc object calls nextInt() method . Explain where an object is Mutating data . // mutating data refers to a change in the original data. Here, the primitive data type is number that is being mutated to create a least common multiple int x = num1.nextInt(); Scanner num2 = new Scanner(System.in); System.out.println(&quot;Enter another number: &quot;); int y = num2.nextInt(); num1.close(); num2.close(); int m = Math.max(x, y); . Describe Console, GUI differences, or Code.org differences. . Console: . User enters inputs and get respective outputs | Not as visual | Requires very good understanding of script and syntax | Example: Bash shell --&gt; inputs by user, outputs through the code | . | GUI: . More clickable platform | Comfortable to use because it&#39;s user-friendly | Visual feedback and display | Can&#39;t really perform multiple tasks at once | You can access another computer/platform remotely | example: Apple&#39;s Macintosh operating system | . | Code.org: . Uses the painter as a visual object to help the user understand the code&#39;s implementations | File and public class &quot; name &quot; should be same | Public class was My Neighborhood same as what the file was named | Calling a method is done through &quot;variableName.methodName(); | More basic platform | . | . Extra Observations . Need to be very careful with syntax and brackets otherwise it throws off your whole code | For GUI Console, inputs would&#39;ve been useful | A problem we faced was that the regular list console wasn&#39;t working on Brian&#39;s computer so we used a GUI instead | We could try having a more visually appealing GUI for our user | Need to be careful when naming doubles and integers being attentive to their definitions | Not as interesting that the GUI can&#39;t take a user input in case we want to make a calculator or something like that | .",
            "url": "https://hetvit27.github.io/hetvitrivedi/jupyter/2022/09/05/MathConsole.html",
            "relUrl": "/jupyter/2022/09/05/MathConsole.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Extra Credit Panel",
            "content": "What made you realize you wanted to major in comp sci? . They experimented through other organization i.e. clubs and jobs | Had a niche for problem solving | Took time to explore and reflect on skills | Recognized necessity of programming in different careers and also know how to logically think | Applied programming to the real world to see benefits | Worked on specific projects | . What’s the biggest challenge you’ve encountered? . Coding errors: persist through it and make sure to use google or ask for help | Combatting egos: focus on your own path and don’t dispute with people; it’s not worth it | Learn the theory: knowing the basics is necessary so that you can go above and beyond with projects | Finding motivation: Need to find courage to learn material; application of CS to projects was motivating | Not everything is just a box to check off; focus on the learning | . How have you applied CS if you’re not majoring in it? . Use CS in MATLAB for if and then statement, optimization, and to make tasks faster | Useful to know how to code for internships or statistical testing | Used in really all fields and a good skill to have in your back pocket | . What are some job opportunities for college students? . Research in labs | Code ninjas and other industrial internships | Join new clubs i.e. robotics | Teacher assistants and tutoring | . Reflection . I never realized how useful the skill of programming can be in daily life and in almost all fields. I think it’s very interesting to hear how coding is almost foundational to many STEM majors and can help you go above and beyond in your projects and how you approach real-world problems and solutions. As someone interested in biotechnology and bioengineering, I know that coding will come up in multiple aspects of my career so I really hope to learn as much as I can through CSA as Mr. M and my peers are there to help me whenever I struggle. I’m even more excited to work on more PBL and get to work with real-world problems. I genuinely believe that when you can apply and teach someone else what you learn, you take a step towards mastery. That my ultimate goal in CSA this year. These panelists are who I envision to be - people who have taken what they’ve learned in the classroom and creatively crafted working, tangible projects that showcase their abilities. I’m looking forward to future opportunities. .",
            "url": "https://hetvit27.github.io/hetvitrivedi/markdown/2022/08/29/ExtraCredit.html",
            "relUrl": "/markdown/2022/08/29/ExtraCredit.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "AP Government Notes",
            "content": "Forms of Government we have discussesd . -Autocracy: One person has all power; monarchy or dictatorship . -Democracy: citizens have power; representative or direct . -Oligarchy: few people control the county; military dictatorship . -Religious Rule: theocracy; god is the ultimate authority here . Liberals and Conservatives . -Liberals: want the government to intervene more to help uplift social and economic welfare when needed . -Conservatives: want individual rights to be emphasized; follow laissez-faire policy . Types of Media . -Print: newspapers, magazines, and journals -Broadcast media: news from TV or radio -Talk Radio: Interviews with commentary mostly always bias -Internet: mix of traditional and blog sites . Types of Sources . -On the record: everything the sources says can be used in article . -On background: reporter may quote the source and give a hint as to where they work . -Off the record: source&#39;s information can&#39;t be used at all so the reporter has to do more searching . -Deep background: can&#39;t quote or identify the source; example: Watergate Scandal .",
            "url": "https://hetvit27.github.io/hetvitrivedi/ap%20gov/2022/08/28/APGov.html",
            "relUrl": "/ap%20gov/2022/08/28/APGov.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "JavaPrimitives",
            "content": "Integer Usage . int a = 4; float b = 4; float sub= (a - b); System.out.println(sub); . 0.0 . String Usage . String x = &quot;hetvi&quot;; String y = &quot;is&quot;; String z = &quot;in CSA period 2&quot;; String name = x + &quot; &quot; + y + &quot; &quot; + z; System.out.println(name); . hetvi is in CSA period 2 . Boolean Usage . boolean is_so_amazing = true; boolean is_not_amazing = false; if (is_so_amazing){ System.out.println(&quot;you are taking CSA!&quot;); } else if (is_not_amazing){ System.out.println(&quot;you are taking another class&quot;); } . you are taking CSA! . Solving for Potential Energy on Earth . public class PotentialEnergyCalculator { public PotentialEnergyCalculator() { this.enterVals(); } private double PE; // initialize PE double. Stores the final output value. private double mass; // initialize mass double. Stores it from the user input. private double height; // initialize height double. Stores it from the user input. private static double g = 9.80; // initialize static double. Stores the constant value. private void enterVals() { while (true) { Scanner dd = new Scanner(System.in); System.out.print(&quot;Enter mass of object in grams: &quot;); try { mass = dd.nextDouble(); System.out.println(mass); // sets variable to True meaning if the double is entered correctly break; } catch (Exception e) { System.out.println(&quot;Not an double (form like 9.99), &quot; + e); // if it&#39;s not a number, it will close. } dd.close(); } while (true) { Scanner dd = new Scanner(System.in); System.out.print(&quot;Enter height at which object is placed in meters: &quot;); try { height = dd.nextDouble(); System.out.println(height); break; } catch (Exception e) { System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } dd.close(); } } public double calculate() { double g = 9.80; PE = (mass*height*g); // equation for calculating potential energy return PE; // outputs calculated value. } public static void main(String[] args) { PotentialEnergyCalculator PE = new PotentialEnergyCalculator(); System.out.println(&quot;Your potential energy in Joules is &quot; + String.format(&quot;%.2f&quot;, PE.calculate())); // script for what the output will look like using string } } PotentialEnergyCalculator.main(null); . Enter mass of object in grams: 3.0 Enter height at which object is placed in meters: 4.0 Your potential energy in Joules is 117.60 .",
            "url": "https://hetvit27.github.io/hetvitrivedi/jupyter/2022/08/27/JavaPrimitives.html",
            "relUrl": "/jupyter/2022/08/27/JavaPrimitives.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Bash Checks",
            "content": "Python Check . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Anaconda Check . conda list . # packages in environment at /Users/ht/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Check . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /Users/ht/Library/Jupyter/kernels/bash java /Users/ht/Library/Jupyter/kernels/java javascript /Users/ht/Library/Jupyter/kernels/javascript python3 /Users/ht/opt/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Users/ht/opt/anaconda3/share/jupyter/kernels/python3 . Bash Hacks Q&amp;A . Is there anything we can use to verify tools we install? . You can use the command &quot;apt list installed&quot; . Is there anything we could use to verify with Anaconda? . You can use the command &quot;conda list&quot; to see within the conda enviornment and what packages are on your device . How would you update a repository? . The command &quot;git pull upstream master&quot; would update your repository . Really cool would be automating a procedure from installation. . I&#39;m not sure about this one .... :O .",
            "url": "https://hetvit27.github.io/hetvitrivedi/jupyter/2022/08/27/BashPost.html",
            "relUrl": "/jupyter/2022/08/27/BashPost.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Problems, Solutions, and Reflections",
            "content": "Introduction . This is the page where I will keep track of my tasks for the week and also note the problems/solutions I encounter . Problems I faced . Computer Science is all about learning from errors and developing innovations. Here are some of the problems I’ve faced in my computer science journey: . -Week One: I had trouble figuring out why my primitive code for potential energy wasn’t actually solving for the value. . Solutions to the problems . While problems are a must in life, solutions are also just a step away. For the problems I faced while coding, here are the solutions I pondered: . -Week One Solution: I had to figure out the difference between static and non-static variables for it to actually compute the answer . Reflection . -Week One Reflection: I really liked using Code.org because I felt like it established the basics that were necessary. I liked building my fastpages more to be personalized and for other classes like AP Gov. .",
            "url": "https://hetvit27.github.io/hetvitrivedi/markdown/2022/08/21/todolist.html",
            "relUrl": "/markdown/2022/08/21/todolist.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Python Jupyter Notebook",
            "content": "msg = &quot;Hi Hetvi&quot; print(msg) . Hi Hetvi .",
            "url": "https://hetvit27.github.io/hetvitrivedi/jupyter/2022/08/21/PythonJupyterNotebook.html",
            "relUrl": "/jupyter/2022/08/21/PythonJupyterNotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Java Jupyter Notebook",
            "content": "System.out.println(&quot;Hello&quot;); . Hello .",
            "url": "https://hetvit27.github.io/hetvitrivedi/jupyter/2022/08/21/JavaJupyterNotebook.html",
            "relUrl": "/jupyter/2022/08/21/JavaJupyterNotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "My First Post!",
            "content": "Hi There! . This is my first post! I’m so excited to learn more about computer science with my class. .",
            "url": "https://hetvit27.github.io/hetvitrivedi/markdown/2022/08/21/Firstpost!.html",
            "relUrl": "/markdown/2022/08/21/Firstpost!.html",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Skills!",
          "content": "Middle School Clubs . Heavily immersed in Science Olympiad where I explored a bunch of different fields like Anatomy, Experimental Design, Epidemiology, and Thermodynamics | I participated in Robotics until 6th grade and then never really tried again until 9th grade | . High School Extracurricululars . Peer Counseling: Lead and organize activities to foster a safe and inclusive environment on campus | Science Olympiad: Continuing to learn more about college level science | Del Norte Food Bank Club: Spreading awareness about the hunger crisis | WHAT Tutor: Helping underclassmen grow their writing and editing skills | NHS Member: Participating in Community Service alongside my peers | . Outside of School Activities . Research at UCSD | Volunteer in community | Author | Bharatnatyam Classical Dance | . Skills . Organized | Leader | Good at public speaking | .",
          "url": "https://hetvit27.github.io/hetvitrivedi/_pages/Skills.html",
          "relUrl": "/_pages/Skills.html",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Who's Hetvi?🤨",
          "content": "My name is Hetvi and I’m a senior at Del Norte. I really love learning and being able to problem solve through using different resources and collaborating with my peers. This year my goals are to learn different programming language and to get to be creative with the projects I do. .",
          "url": "https://hetvit27.github.io/hetvitrivedi/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "CSA Notes",
          "content": "Unit One: Primitive Types . Goal: To learn the fundamentals of Java and other foundational concepts for coding. . Fastpages Notes _notebooks: mostly jupyter files. This allows building block of markdown, python, java, javascript into a jupyter notebook. _posts: markdown .md files. This supports frontend web design with markdown, html, and javascript. _word: word .docx files. This allows you to save Microsoft or Google documents into a docx format. Saving these directly to _word folder will help streamline steps. . Homepage notes The Home page is sourced by the index.html file. This is the file to personalize and customize your Fastpages home page. BTW, index.html is the standard name for your web sites landing page. . Primitive Notes The primitive data types in Java are: boolean, byte, char, short, int, long, float, and double. For each primitive data type, Java provides a wrapper class that allows the data to be represented as objects. The corresponding wrapper classes are: Boolean, Byte, Character, Short, Integer, Long, Float, and Double. The output is key to formatting and combining data Wrapper Classes are non-primitive data type that do not require declaration. Collegeboard provides the example of String – they are capitalized unlike primitives . Unit Two: Using Objects . Goal: Explore reference data in order to represent real-world objects in a digital world and discover methods to initiate more complex operations . Unit Three: Boolean Expressions and if Statements . Goal: Dive into the building blocks of algorithms and use conditional statements to solve problems and have control over your results . Unit Four: Iteration . Goal: Learn about iteration which is used for repetition in algorithms . Unit Five: Writing Clauses . Goal: Explore real-world interactions that can be expressed through code by organizing behaviors and attribites into classes – also learn about the legal and ethical implications of programming . Unit Six: Array . Goal: Learn techniques and standard algorithms to work with collections of data structures . Unit Seven: ArrayList . Goal: Delve into data setts, exploring ArrayList objects for larger amounts of data, as well as the privacy concerns for your personal data storage . Unit Eight: 2D Array . Goal: Experiment with data sets represented in a table . Unit Nine: Inheritance . Goal: Manipulate programming without altering original code by using subclasses to create a hierarchy . Unit Ten: Recurision . Goal: Solve larger problems by solving small versions of the same problems using recursive methods .",
          "url": "https://hetvit27.github.io/hetvitrivedi/_pages/notes.html",
          "relUrl": "/_pages/notes.html",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hetvit27.github.io/hetvitrivedi/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}